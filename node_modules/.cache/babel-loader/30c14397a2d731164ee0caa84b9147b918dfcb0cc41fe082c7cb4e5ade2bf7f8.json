{"ast":null,"code":"import _objectSpread from \"/Users/aminerebbouh/Desktop/react-app copy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mix } from './mix.mjs';\nimport { rgba, hsla, hex } from 'style-value-types';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nvar mixLinearColor = function mixLinearColor(from, to, v) {\n  var fromExpo = from * from;\n  return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nvar colorTypes = [hex, rgba, hsla];\nvar getColorType = function getColorType(v) {\n  return colorTypes.find(function (type) {\n    return type.test(v);\n  });\n};\nfunction asRGBA(color) {\n  var type = getColorType(color);\n  invariant(Boolean(type), \"'\".concat(color, \"' is not an animatable color. Use the equivalent color code instead.\"));\n  var model = type.parse(color);\n  if (type === hsla) {\n    model = hslaToRgba(model);\n  }\n  return model;\n}\nvar mixColor = function mixColor(from, to) {\n  var fromRGBA = asRGBA(from);\n  var toRGBA = asRGBA(to);\n  var blended = _objectSpread({}, fromRGBA);\n  return function (v) {\n    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n    blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n    return rgba.transform(blended);\n  };\n};\nexport { mixColor, mixLinearColor };","map":{"version":3,"names":["mix","rgba","hsla","hex","invariant","hslaToRgba","mixLinearColor","from","to","v","fromExpo","Math","sqrt","max","colorTypes","getColorType","find","type","test","asRGBA","color","Boolean","model","parse","mixColor","fromRGBA","toRGBA","blended","red","green","blue","alpha","transform"],"sources":["/Users/aminerebbouh/Desktop/react-app copy/node_modules/framer-motion/dist/es/utils/mix-color.mjs"],"sourcesContent":["import { mix } from './mix.mjs';\nimport { rgba, hsla, hex } from 'style-value-types';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"],"mappings":";AAAA,SAASA,GAAG,QAAQ,WAAW;AAC/B,SAASC,IAAI,EAAEC,IAAI,EAAEC,GAAG,QAAQ,mBAAmB;AACnD,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,UAAU,QAAQ,oBAAoB;;AAE/C;AACA;AACA;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,IAAI,EAAEC,EAAE,EAAEC,CAAC,EAAK;EACpC,IAAMC,QAAQ,GAAGH,IAAI,GAAGA,IAAI;EAC5B,OAAOI,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEJ,CAAC,IAAID,EAAE,GAAGA,EAAE,GAAGE,QAAQ,CAAC,GAAGA,QAAQ,CAAC,CAAC;AACtE,CAAC;AACD,IAAMI,UAAU,GAAG,CAACX,GAAG,EAAEF,IAAI,EAAEC,IAAI,CAAC;AACpC,IAAMa,YAAY,GAAG,SAAfA,YAAY,CAAIN,CAAC;EAAA,OAAKK,UAAU,CAACE,IAAI,CAAC,UAACC,IAAI;IAAA,OAAKA,IAAI,CAACC,IAAI,CAACT,CAAC,CAAC;EAAA,EAAC;AAAA;AACnE,SAASU,MAAM,CAACC,KAAK,EAAE;EACnB,IAAMH,IAAI,GAAGF,YAAY,CAACK,KAAK,CAAC;EAChChB,SAAS,CAACiB,OAAO,CAACJ,IAAI,CAAC,aAAMG,KAAK,0EAAuE;EACzG,IAAIE,KAAK,GAAGL,IAAI,CAACM,KAAK,CAACH,KAAK,CAAC;EAC7B,IAAIH,IAAI,KAAKf,IAAI,EAAE;IACfoB,KAAK,GAAGjB,UAAU,CAACiB,KAAK,CAAC;EAC7B;EACA,OAAOA,KAAK;AAChB;AACA,IAAME,QAAQ,GAAG,SAAXA,QAAQ,CAAIjB,IAAI,EAAEC,EAAE,EAAK;EAC3B,IAAMiB,QAAQ,GAAGN,MAAM,CAACZ,IAAI,CAAC;EAC7B,IAAMmB,MAAM,GAAGP,MAAM,CAACX,EAAE,CAAC;EACzB,IAAMmB,OAAO,qBAAQF,QAAQ,CAAE;EAC/B,OAAO,UAAChB,CAAC,EAAK;IACVkB,OAAO,CAACC,GAAG,GAAGtB,cAAc,CAACmB,QAAQ,CAACG,GAAG,EAAEF,MAAM,CAACE,GAAG,EAAEnB,CAAC,CAAC;IACzDkB,OAAO,CAACE,KAAK,GAAGvB,cAAc,CAACmB,QAAQ,CAACI,KAAK,EAAEH,MAAM,CAACG,KAAK,EAAEpB,CAAC,CAAC;IAC/DkB,OAAO,CAACG,IAAI,GAAGxB,cAAc,CAACmB,QAAQ,CAACK,IAAI,EAAEJ,MAAM,CAACI,IAAI,EAAErB,CAAC,CAAC;IAC5DkB,OAAO,CAACI,KAAK,GAAG/B,GAAG,CAACyB,QAAQ,CAACM,KAAK,EAAEL,MAAM,CAACK,KAAK,EAAEtB,CAAC,CAAC;IACpD,OAAOR,IAAI,CAAC+B,SAAS,CAACL,OAAO,CAAC;EAClC,CAAC;AACL,CAAC;AAED,SAASH,QAAQ,EAAElB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}